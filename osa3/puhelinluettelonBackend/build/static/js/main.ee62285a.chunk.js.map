{"version":3,"sources":["services/restclient.js","components/Filter.js","components/PersonForm.js","components/PeopleList.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Filter","searchTerm","onChange","searchResults","type","value","map","item","i","key","name","PersonForm","onSubmit","number","nameChange","numberChange","onClick","PeopleList","people","removePerson","person","Notification","notification","className","App","useState","setPeople","newName","setNewName","newNumber","setNewNumber","setNewPeople","setSearchTerm","setSearchResults","setNotification","useEffect","console","log","peopleService","initialPeople","length","results","filter","toLowerCase","includes","event","target","preventDefault","find","window","confirm","personObject","returnedPerson","p","setTimeout","catch","error","alert","updatedPeople","concat","deleteId","returnedPeople","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uPACMA,EAAU,oCAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfG,SAAAC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVG,SAACG,EAAIF,GAEnB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALG,SAACG,GAEf,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCL9BM,EAbA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,WAAYC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,cAGnC,OACI,kDACsB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAYC,SAAUA,IAClE,4BACKC,EAAcG,KAAI,SAACC,EAAMC,GAAP,OAAc,wBAAIC,IAAKD,GAAID,EAAKG,YCSpDC,EAhBI,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,SAAUF,EAA6C,EAA7CA,KAAMG,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAGtD,OACI,8BACI,sCACU,2BAAOV,MAAOK,EAAMR,SAAUY,IADxC,WAEY,2BAAOT,MAAOQ,EAAQX,SAAUa,KAE5C,6BACI,2BAAOX,KAAK,SAASC,MAAM,MAAMW,QAASJ,OCE3CK,EAZI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAG1B,OACI,6BACI,4BACKD,EAAOZ,KAAI,SAACc,EAAQZ,GAAT,OAAgB,wBAAIC,IAAKD,GAAIY,EAAOV,KAApB,IAA2BU,EAAOP,OAAlC,IAA0C,4BAAQG,QAAS,kBAAMG,EAAaC,EAAOvB,MAA3C,UAA1C,WCM3BwB,EAZI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OAAqB,OAAjBA,EACK,KAIP,yBAAKC,UAAU,gBACZD,IC2HME,EA7HH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTP,EADS,KACDQ,EADC,OAEcD,mBAAS,IAFvB,mBAETE,EAFS,KAEAC,EAFA,OAGkBH,mBAAS,IAH3B,mBAGTI,EAHS,KAGEC,EAHF,OAIkBL,mBAAS,IAJ3B,mBAIEM,GAJF,aAKoBN,mBAAS,IAL7B,mBAKTxB,EALS,KAKG+B,EALH,OAM0BP,mBAAS,IANnC,mBAMTtB,EANS,KAMM8B,EANN,OAOwBR,mBAAS,MAPjC,mBAOTH,EAPS,KAOKY,EAPL,KAShBC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAGG9C,MAAK,SAAA+C,GACJb,EAAUa,QAEb,IACHH,QAAQC,IAAI,SAAUnB,EAAOsB,OAAQtB,GAqFrC,OATAiB,qBAAU,WACR,IAAMM,EAAWxC,EAEbiB,EAAOwB,QAAO,SAAAtB,GAAM,OACpBA,EAAOV,KAAKiC,cAAcC,SAAS3C,EAAW0C,kBAF9CzB,EAIJe,EAAiBQ,KAChB,CAACxC,IAGF,6BACE,yCACA,kBAAC,EAAD,CAAcqB,aAAcA,IAC5B,kBAAC,EAAD,CACErB,WAAYA,EACZC,SAvFe,SAAC2C,GAAD,OAAWb,EAAca,EAAMC,OAAOzC,QAwFrDF,cAAeA,IAEjB,yCACA,kBAAC,EAAD,CAAYS,SAzFE,SAACiC,GAGjB,GAFAA,EAAME,iBAEF7B,EAAO8B,MAAK,qBAAGtC,OAAoBiB,MACrC,GAAIsB,OAAOC,QAAP,UAAkBvB,EAAlB,qEAA8F,CAChG,IAAM9B,EAAKqB,EAAO8B,MAAK,qBAAGtC,OAAoBiB,KAAS9B,GACjDsD,EAAe,CACnBzC,KAAMiB,EACNd,OAAQgB,GAEVS,EAEazC,EAAIsD,GACd3D,MAAK,SAAA4D,GAEJ1B,EAAUR,EAAOZ,KAAI,SAAA+C,GAAC,OAAIA,EAAExD,KAAOA,EAAKwD,EAAID,MAC5ClB,EAAgB,kBAAD,OACKiB,EAAazC,KADlB,uBAGf4C,YAAW,WACTpB,EAAgB,QACf,QAEJqB,OAAM,SAAAC,GACLC,MAAM,YAAD,OAAaN,EAAazC,KAA1B,mDAGN,CACL,IAAMyC,EAAe,CACnBzC,KAAMiB,EACNd,OAAQgB,EACRhC,GAAIqB,EAAOsB,OAAS,GAEtBF,EAEaa,GACV3D,MAAK,SAAAkE,GACJhC,EAAUR,EAAOyC,OAAOD,IACxB3B,EAAa,IACbG,EAAgB,IAAD,OACTiB,EAAazC,KADJ,yBAGf4C,YAAW,WACTpB,EAAgB,QACf,UA8CLxB,KAAMiB,EACNb,WA/FmB,SAAC+B,GAAD,OAAWjB,EAAWiB,EAAMC,OAAOzC,QAgGtDQ,OAAQgB,EACRd,aAhGqB,SAAC8B,GAAD,OAAWf,EAAae,EAAMC,OAAOzC,UAkG5D,uCACA,kBAAC,EAAD,CAAYa,OAAQA,EAAQC,aA/CX,SAACtB,GACpB,IAAM+D,EAAW1C,EAAOwB,QAAO,SAAAtB,GAAM,OAAIA,EAAOvB,KAAOA,KAC/B,IAApB+D,EAASpB,QACPS,OAAOC,QAAP,gCAAwCU,EAAS,GAAGlD,KAApD,OACF4B,EAEazC,GACVL,MAAK,SAAAqE,GACJzB,QAAQC,IAAI,iBAAkBwB,GAC9BnC,EAAUR,EAAOwB,QAAO,SAAAtB,GAAM,OAAIA,EAAOvB,KAAOA,MAEhDqC,EAAgB,IAAD,OAAK0B,EAAS,GAAGlD,KAAjB,6BACf4C,YAAW,WACTpB,EAAgB,QACf,SAiC+CA,gBAAiBA,MCnH3D4B,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjF,MAAK,SAAAkF,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMoB,c","file":"static/js/main.ee62285a.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst createOne = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst updateOne = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n  }\r\n\r\nconst deleteOne = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, createOne, updateOne, deleteOne }","import React from 'react';\r\n\r\nconst Filter = ({searchTerm, onChange, searchResults}) => {\r\n    // console.log('Filter props value is', {searchTerm, onChange, searchResults})\r\n\r\n    return (\r\n        <div>\r\n            filter shown with <input type=\"text\" value={searchTerm} onChange={onChange} />\r\n            <ul>\r\n                {searchResults.map((item, i) => (<li key={i}>{item.name}</li>))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\n\r\nconst PersonForm = ({ onSubmit, name, number, nameChange, numberChange }) => {\r\n    // console.log('PersonForm props value is', { onSubmit, name, number, nameChange, numberChange })\r\n\r\n    return (\r\n        <form>\r\n            <div>\r\n                name: <input value={name} onChange={nameChange} />\r\n                number: <input value={number} onChange={numberChange} />\r\n            </div>\r\n            <div>\r\n                <input type=\"button\" value=\"add\" onClick={onSubmit} />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm;\r\n","import React from 'react';\r\n\r\nconst PeopleList = ({ people, removePerson }) => {\r\n    // console.log('PeopleList props value is', { people, removePerson })\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {people.map((person, i) => (<li key={i}>{person.name} {person.number} <button onClick={() => removePerson(person.id)}>poista</button> </li>))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PeopleList;","import React from 'react'\r\n\r\nconst Notification = ({ notification }) => {\r\n    if (notification === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"notification\">\r\n        {notification}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  export default Notification","import React, { useState, useEffect } from 'react'\r\nimport peopleService from './services/restclient'\r\nimport Filter from './components/Filter'\r\nimport PersonForm from './components/PersonForm'\r\nimport PeopleList from './components/PeopleList'\r\nimport Notification from './components/Notification'\r\n\r\nconst App = () => {\r\n  const [people, setPeople] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [newPeople, setNewPeople] = useState('')\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const [searchResults, setSearchResults] = useState([])\r\n  const [notification, setNotification] = useState(null)\r\n\r\n  useEffect(() => {\r\n    console.log('effect')\r\n    peopleService\r\n    //GET\r\n      .getAll()\r\n      .then(initialPeople => {\r\n        setPeople(initialPeople)\r\n      })\r\n  }, [])\r\n  console.log('render', people.length, people)\r\n\r\n  const handleNameChange = (event) => setNewName(event.target.value)\r\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\r\n  const handleFilter = (event) => setSearchTerm(event.target.value)\r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault()\r\n    //ilmoittaa, jos nimi on jo listalla ja kysyy halutaanko puhelinnumero muuttaa?\r\n    if (people.find(({ name }) => name === newName)) {\r\n      if (window.confirm(`${newName} is already in phonebook, replace the old number with a new one?`)) {\r\n        const id = people.find(({ name }) => name === newName).id\r\n        const personObject = {\r\n          name: newName,\r\n          number: newNumber,\r\n        }\r\n        peopleService\r\n        //PUT - update number\r\n          .updateOne(id, personObject)\r\n          .then(returnedPerson => {\r\n            // setPeople(people.filter(p => p.id_updateNumber !== id_updateNumber))\r\n            setPeople(people.map(p => p.id !== id ? p : returnedPerson))\r\n            setNotification(\r\n              `The number of '${personObject.name}' has been updated`\r\n            )\r\n            setTimeout(() => {\r\n              setNotification(null)\r\n            }, 5000)\r\n          })\r\n          .catch(error => {\r\n            alert(`Data of '${personObject.name}' has already been removed from server`)\r\n          })\r\n      }\r\n    } else {\r\n      const personObject = {\r\n        name: newName,\r\n        number: newNumber,\r\n        id: people.length + 1,\r\n      }\r\n      peopleService\r\n      //POST\r\n        .createOne(personObject)\r\n        .then(updatedPeople => {\r\n          setPeople(people.concat(updatedPeople))\r\n          setNewPeople('')\r\n          setNotification(\r\n            `'${personObject.name}' added to phonebook`\r\n          )\r\n          setTimeout(() => {\r\n            setNotification(null)\r\n          }, 5000)\r\n        })\r\n    }\r\n  }\r\n\r\n  const removePerson = (id) => {\r\n    const deleteId = people.filter(person => person.id === id)\r\n    if (deleteId.length === 1) {\r\n      if (window.confirm(`Do you want to delete ${deleteId[0].name}?`)) {\r\n        peopleService\r\n        //DELETE\r\n          .deleteOne(id)\r\n          .then(returnedPeople => {\r\n            console.log('returnedPeople', returnedPeople)\r\n            setPeople(people.filter(person => person.id !== id))\r\n            // setNewPeople(people.concat(returnedPeople))\r\n            setNotification(`'${deleteId[0].name}' deleted from phonebook`)\r\n            setTimeout(() => {\r\n              setNotification(null)\r\n            }, 5000)\r\n          })\r\n      }\r\n    }\r\n  }\r\n\r\n  //FILTER - filteröi nimet, sisältää annetun kirjaimen/nimen\r\n  useEffect(() => {\r\n    const results = !searchTerm\r\n      ? people\r\n      : people.filter(person =>\r\n        person.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    setSearchResults(results);\r\n  }, [searchTerm]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification notification={notification} />\r\n      <Filter\r\n        searchTerm={searchTerm}\r\n        onChange={handleFilter}\r\n        searchResults={searchResults}\r\n      />\r\n      <h2>add a new</h2>\r\n      <PersonForm onSubmit={addPerson}\r\n        name={newName}\r\n        nameChange={handleNameChange}\r\n        number={newNumber}\r\n        numberChange={handleNumberChange}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <PeopleList people={people} removePerson={removePerson} setNotification={setNotification} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}